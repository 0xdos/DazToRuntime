/**********************************************************************
	Generated by DAZ PreCompiler from the following files:
		icon.png

	Copyright (c) 2002-2020 Daz 3D, Inc - All Rights Reserved.
**********************************************************************/

/*****************************
	Include files
*****************************/
#include <QtGui/QImage>
#include "dpcimages.h"

struct DpcEmbeddedImageData
{
	const char			*name;
	int					width, height;
	bool				alpha;
	int					compressedSize;
	const unsigned char	*data;
};

// Generated from the file: icon.png
static const unsigned char image_0_data[587] = {
	0x00,0x00,0x12,0x20,0x78,0x9C,0xED,0x96,0x3F,0x48,0x1B,0x51,0x1C,0xC7,0xB5,0x8A,0x43,0x6D,0x51,0x04,
	0xA9,0x60,0x69,0x37,0x3B,0x8A,0x20,0x08,0x16,0x07,0xDD,0x0A,0xD6,0xD1,0xC1,0xA1,0xB8,0x14,0x37,0xC5,
	0x62,0xE9,0x9A,0xCB,0x1F,0x88,0x04,0x12,0x0C,0xB6,0x74,0x2B,0x1D,0x74,0x08,0x25,0x10,0x74,0xCA,0xA0,
	0xA4,0x43,0x86,0x20,0x69,0x84,0x96,0xAC,0x9D,0x1A,0x51,0x1A,0xE3,0x1F,0xD4,0xC8,0xE1,0xCF,0xEF,0xAB,
	0x3F,0xE1,0xE5,0x78,0xF7,0x4F,0x92,0xB3,0x43,0x7E,0xF0,0xE1,0x2E,0xF7,0x7E,0x79,0xBF,0xCF,0xDD,0xBD,
	0x7B,0xEF,0xB5,0xB4,0x34,0x26,0x34,0x4D,0x5B,0xF0,0xF9,0x7C,0x47,0x80,0xCC,0x40,0xCE,0x15,0xD8,0x09,
	0x87,0xC3,0xCF,0x1A,0xA4,0xA1,0x8C,0x48,0x24,0xD2,0x89,0xBA,0xBA,0x95,0x9B,0x81,0x15,0x2F,0xFD,0x82,
	0xC1,0x60,0xBF,0x0B,0x37,0xC1,0x5A,0xD3,0xEF,0x7E,0xFC,0x88,0xA8,0x0B,0xB4,0xFF,0x6F,0x7E,0x70,0xEA,
	0x01,0x31,0xB0,0x68,0x93,0xD7,0x09,0x86,0xBD,0xF4,0x43,0xBD,0x19,0xB0,0x0F,0x7E,0x81,0x56,0x93,0x9C,
	0xC7,0x60,0x19,0xEC,0x81,0x41,0x2F,0xFC,0x84,0x0B,0xD7,0xBC,0x8D,0xAF,0x26,0x79,0xC3,0xE0,0x0F,0xE7,
	0xCC,0x1B,0xDB,0xED,0xFC,0x30,0xFF,0xB8,0xF6,0x43,0x9D,0x07,0x60,0x9D,0x6A,0xA3,0x04,0x26,0xA4,0x9C,
	0x37,0xE0,0x0B,0x38,0xE6,0xF6,0x8C,0xEA,0xF9,0xDA,0xF9,0x65,0xB3,0x59,0x2A,0x16,0x8B,0x14,0x8D,0x46,
	0xDD,0xF8,0x85,0x49,0x1D,0x9B,0x52,0x4E,0x1B,0x38,0x95,0xDA,0x94,0xF3,0xAA,0x13,0x3F,0x11,0xD5,0x6A,
	0x95,0xD2,0xE9,0x34,0x21,0x7F,0xDD,0xC6,0x6D,0x9A,0xEB,0xED,0xF1,0xFB,0x3D,0x52,0xF9,0x71,0xEE,0x41,
	0xBD,0xFC,0x6E,0xA3,0x52,0xA9,0x1C,0xE2,0x30,0x66,0xE2,0xF6,0x90,0xC7,0xD2,0x4F,0xD0,0xC7,0xD7,0x3E,
	0x5B,0xF8,0xED,0xBB,0xF1,0x13,0x63,0x2D,0x1E,0x8F,0xD7,0x90,0xCF,0xE7,0x55,0xEF,0xE9,0x8A,0xC7,0x4E,
	0xAF,0xA1,0xDE,0x22,0x3F,0x93,0xE7,0xD2,0xB5,0x8F,0xF5,0xF2,0x2B,0x14,0x0A,0x2A,0x17,0xAB,0xF8,0x0B,
	0xDE,0x12,0x8F,0x6B,0x1C,0xB7,0xC0,0xB8,0xC1,0xC1,0xCA,0xCF,0xD5,0xFB,0xBD,0x83,0x9F,0x88,0x5D,0x30,
	0xC0,0xF5,0x96,0x8C,0xFD,0xD7,0xD3,0x2F,0x99,0x4C,0x52,0x2E,0x97,0xAB,0xA1,0x54,0x2A,0x99,0x79,0x9D,
	0x80,0x77,0x24,0xAD,0x57,0x38,0xEF,0xA8,0x87,0x1F,0xCE,0xFB,0x40,0x9B,0xD1,0xCF,0xC9,0xF7,0xC1,0xF1,
	0x0D,0x3C,0x55,0xDD,0xAF,0x53,0x3F,0x71,0x5F,0xA0,0x22,0xB5,0xAD,0xF2,0xF5,0x57,0xE0,0x83,0xEA,0xF9,
	0xD9,0xF9,0x95,0xCB,0x65,0x4A,0xA5,0x52,0x5B,0x4E,0xBC,0x24,0x8F,0x4F,0x92,0x83,0x98,0x6B,0x66,0xC1,
	0x6B,0xF0,0xDD,0x70,0xCF,0x67,0xE0,0x07,0xF8,0x0D,0x1E,0xB9,0xF1,0xD3,0x75,0x9D,0x32,0x99,0x0C,0x05,
	0x02,0x01,0x57,0xEB,0x2F,0xBF,0xFF,0x03,0x72,0x1E,0xE2,0x7B,0x7E,0x21,0xF7,0x61,0xE7,0x97,0x48,0x24,
	0xFE,0xCD,0x33,0x77,0xD9,0x1F,0xA0,0x56,0x3F,0xD8,0x36,0x71,0xB9,0x00,0x21,0x70,0xCE,0xBF,0xC5,0xBC,
	0x39,0x64,0xEC,0xC3,0x83,0xFD,0x8B,0x58,0x8B,0xA7,0xE8,0x66,0xEE,0xD1,0xD9,0xE5,0x12,0x4C,0x72,0xFB,
	0x08,0xD8,0x20,0x93,0xF1,0xEC,0xF1,0xFE,0x54,0xAC,0x2F,0x2F,0xC1,0xA8,0xD3,0xFF,0x34,0xF7,0xF7,0x4D,
	0xBF,0xFB,0xF4,0x0B,0x85,0x42,0x4F,0x5C,0xFA,0x29,0xF7,0xE9,0x8D,0x0C,0x4D,0xD3,0x0A,0x4E,0xFD,0xFC,
	0x7E,0xFF,0x8C,0xD7,0x7E,0xB1,0x58,0xAC,0x1B,0x8E,0x73,0xE0,0xBD,0x19,0xF0,0x5A,0xC2,0xFA,0x31,0x61,
	0xD5,0xCF,0x35,0x83,0xC0,0xA6,0x55
};
static const DpcEmbeddedImageData s_embeddedImages[] = {
	{ "icon", 40, 29, true, 587, image_0_data },
	{ 0, 0, 0, 0 }
};

/*********************************************************************/
QImage getEmbeddedImage( const char *name )
{
	const DpcEmbeddedImageData	*data = s_embeddedImages;
	while( data->name != 0 ){
		if( strcmp( data->name, name ) == 0 ){
			QByteArray	bytes( data->compressedSize, '\0' );
			QImage		img( data->width, data->height, data->alpha ? QImage::Format_ARGB32 : QImage::Format_RGB32 );
			memcpy( bytes.data(), data->data, data->compressedSize );
			bytes = qUncompress( bytes );

			if( QSysInfo::ByteOrder == QSysInfo::BigEndian ){
				int i, num = bytes.size();
				char temp, temp2;
				char *bytesData = bytes.data();
				for( i = 0; i < num; i += 4 ){
					temp = bytesData[i];
					temp2 = bytesData[i + 1];
					bytesData[i] = bytesData[i + 3];
					bytesData[i + 1] = bytesData[i + 2];
					bytesData[i + 2] = temp2;
					bytesData[i + 3] = temp;
				}
			}

			memcpy( img.bits(), bytes.data(), bytes.size() );
			return img;
		}
		data++;
	}
	return QImage();
}